# üîí Licensed under the GNU GPLv3
# üåê https://www.gnu.org/licenses/agpl-3.0.html
# meta developer: @VacuumCleanr

from .. import loader, utils
from telethon.tl.types import Message
from telethon.utils import get_display_name
import datetime, requests
from time import strftime

@loader.tds
class RaffAss(loader.Module):
    """–ú–æ–¥—É–ª—å-–ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –∏ —Ä—É–ª–µ—Ç–æ–∫"""

    strings = {
        "name": "RaffleAssistant",
        "error_no_pm": "<b>[UserBot]</b> –≠—Ç–æ –Ω–µ —á–∞—Ç",
        "errr_no_reply": "<b>[UserBot]</b> –ù–µ —Ç—É–ø–∏, –Ω–∏–∫–∞–∫–æ–π —ç—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç :)",
        "no_rank": "–ê–Ω–æ–Ω–∏–º –±–µ–∑ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏",
        "_list_begin":" ‚ï≠Ô∏é üóÇ <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n",
        "_list_body" : "‚îúÔ∏é <b>{}</b>. {}\n", 
        "_list_footer":"‚ï∞Ô∏é <b>{}</b>. {}\n",
    }
    
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue( # self.config["max_users"]
                "max_users",
                100,
                doc=lambda: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                validator=loader.validators.Integer()
            ),
            loader.ConfigValue( # self.config["ignored_users"]
                "ignored_users",
                [ ],
                doc=lambda: "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —É—á–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –æ—Ç–±–æ—Ä–µ –Ω–∞ —Ä—É–ª–µ—Ç–∫—É",
                validator=loader.validators.Series(validator=loader.validators.String())
            ),                 
            loader.ConfigValue( # self.config["trigger_symbols"]
                "trigger_symbols",
                ['+', 'plus', '–ø–ª—é—Å', '‚ûï', 'üëç', '‚úîÔ∏è', '‚úÖ', '‚òëÔ∏è'],
                doc=lambda: "–°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –æ—Ç–±–æ—Ä–µ –Ω–∞ —Ä—É–ª–µ—Ç–∫—É",
                validator=loader.validators.Series(validator=loader.validators.String()) # 
            ),
            
            loader.ConfigValue( # self.config["theme_template"]
                "theme_template",
                " ‚ï≠Ô∏é üóÇ <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n‚îúÔ∏é <b>{}</b>. {}\n‚ï∞Ô∏é <b>{}</b>. {}\n",
                doc=lambda: "–®–∞–±–ª–æ–Ω/–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ —Å–ø–∏—Å–∫–∞",
                validator=loader.validators.String() # 
            ),           
    )
        
    async def load_theme(self,):
        lines = self.config["theme_template"].split('\n')
        if len(lines) == 3: 
            return lines
        else: 
            return " ‚ï≠Ô∏é üóÇ <b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n‚îúÔ∏é <b>{}</b>. {}\n‚ï∞Ô∏é <b>{}</b>. {}\n".split('\n')
        
    async def listview(self, list):
        i = 0
        cusers = len(list)
        listview = self.strings("_list_begin")
        for user in list:
           i += 1
           if cusers == i: listview += self.strings("_list_footer").format(i, user)
           else: listview += self.strings("_list_body").format(i, user)
        return listview   

    @loader.unrestricted
    async def uliucmd(self, m: Message):
        """ - –°–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —É—á–∞—Å—Ç–≤–∏–µ –≤ –æ—Ç–±–æ—Ä–µ
        0 - –∑–∞–ø—Ä–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        """
        pass
    
    @loader.unrestricted
    async def ulcmd(self, m: Message):
        """ <*reply> [max_users:int] - G–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
           –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞ 25 —á–µ–ª: .ul 25 
        """
        
        args = utils.get_args(m)
        chatid = utils.get_chat_id(m)
        max_users = self.config["max_users"]
        
        if args:
            try: max_users = int(args[0])
            except ValueError: pass
          
        if not m.chat:
            return await m.edit(self.string("error_no_pm"))

        reply = await m.get_reply_message()
        if not reply: return await m.edit(self.string("errr_no_reply"))
        else:
            c = 0
            usrlist = [ ]
            async for msg in m.client.iter_messages(chatid, offset_id = reply.id, reverse=True, limit = 400):
                if max_users == c: break
                useradd = ''
                try:
                    if str(msg.text).lower() in self.config["trigger_symbols"]: #self.symbols_add:
                        user = get_display_name(msg.sender)
                        if msg.sender == None:
                            user = msg.post_author
                            uid = 0
                        else:
                            uid = msg.sender.id
                        if not user: user = m.chat.title
                        if not user in usrlist:
                            c += 1
                            useradd = user
                            #self.usrlist.append(user)
                            
                except AttributeError: continue
                except TypeError: continue
                except NameError:
                    c += 1
                    useradd = self.strings("no_rank")
                    
                if useradd:
                    if uid in self.config["ignored_users"]: continue
                    else: usrlist.append(useradd)
                
        await utils.answer(m, await self.listview(usrlist))
