from .. import loader, utils
from telethon.tl.types import Message
from telethon.utils import get_display_name
import datetime, requests, random
from time import strftime

@loader.tds
class FreeDistribution(loader.Module):
"""–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±–µ–ø–ª–∞—Ç–Ω–æ–π —Ä–∞–∑–¥–∞—á–∏ –Ω–∏—à—Ç—è–∫–æ–≤"""

    strings = {
        "name": "FreeDistribution",
        "btnName": "üéÅ –ó–∞–±—Ä–∞—Ç—å —Ö–∞–ª—è–≤—É!",
        "":"",
        "error_store_empty", "–°–∫–ª–∞–¥ –ø—É—Å—Ç —Ä–∞–∑–¥–∞–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–ª–∞–¥!",
        
    }
  
    def __init__(self):
      self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "BannerUrl",
                "https://raw.githubusercontent.com/qTyler/ModulesUserbot/main/freedistrb_logo.png",
                doc=lambda: "–ë–∞–Ω–Ω–µ—Ä —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–∑–¥–∞—á–∏",
                validator=loader.validators.Url()
            ),
            loader.ConfigValue(
                "StartDesc",
                "",
                doc=lambda: "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ä–∞–∑–¥–∞—á–∏. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                validator=loader.validators.String()
            ),          
            loader.ConfigValue(
                "DisTime",
                3,
                doc=lambda: "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏ –≤ —á–∞—Å–∞—Ö. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                validator=loader.validators.Integer()
            ),
            loader.ConfigValue(
                "BlockUserDays",
                14,
                doc=lambda: "–ó–∞–ø—Ä–µ—Ç –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑–¥–∞—á–∞—Ö –≤ –¥–Ω—è—Ö. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                validator=loader.validators.Integer()
            ),         
            loader.ConfigValue(
                "ReviewsTTL",
                48,
                doc=lambda: "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –≤ —á–∞—Å–∞—Ö. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                validator=loader.validators.Integer()
            ),
            loader.ConfigValue(
                "LinkFrequency",
                2,
                doc=lambda: "–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —á–∞—Å. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                validator=loader.validators.Integer()
            ),    
            loader.ConfigValue(
                "LinkLifetime",
                3,
                doc=lambda: "–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏/–∫–Ω–æ–ø–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö. –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                validator=loader.validators.Integer()
            ),         
            loader.ConfigValue( 
                "Store",
                [ ],
                doc=lambda: "–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ñ—Ñ (–∫–ª—é—á–∏, —Å–æ—Ñ—Ç –∏ —Ç.–¥.), –ø—Ä–∏–º–µ—Ä: https://privnote.com/QmPkpRR5#2NmQ0dOBG",
                validator=loader.validators.Series(validator=loader.validators.Url())
            ),
        )
    
    def _get_mark(self):
        #url = self.config['Store'][random.randint(0, len(self.config['Store']))]
        return (
            {
                "text": self.config["btnName"],
                "data": b"sendbonus",
            }
        )
    
    @loader.owner
    async def fdstrbcmd(self, m: Message):
        """ <–≤—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–∑–¥–∞—á–∏> <—á–∞—Å—Ç–æ—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ —á–∞—Å> <–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏> 
        –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–∑–¥–∞—á—É –Ω–∏—à—Ç—è–∫–æ–≤!
        """
        reply = await m.get_reply_message()
        userid = reply.sender_id
        
        if args:
            try: 
                if len(args) == 1: self.config["DisTime"] = int(args[0])
                if len(args) == 2: self.config["LinkFrequency"] = int(args[1])
                if len(args) == 3: self.config["LinkLifetime"]  = int(args[2])
            except ValueError: pass
            
        if len(self.config['Store']) > 0:
          return await m.edit(self.strings("error_store_empty"))
        
        await self.inline.form(
            message = message,
            text = self.config["StartDesc"].format( #self.config["LinkFrequency"],
                self.config["DisTime"],
                self.config["LinkLifetime"],
                self.config["ReviewsTTL"],
                self.config["BlockUserDays"]
            ),
            reply_markup = self._get_mark(),
            **(
                {"photo": self.config["BannerUrl"]}
                if self.config["BannerUrl"]
                else {}
            ),
        )
        
